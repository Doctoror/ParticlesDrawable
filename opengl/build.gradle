apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'
apply plugin: 'signing'

android {

    namespace 'com.doctoror.particlesdrawable.opengl'

    final def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration["androidCompileSdkVersion"]
    buildToolsVersion globalConfiguration["androidBuildToolsVersion"]

    defaultConfig {

        minSdkVersion globalConfiguration["androidMinSdkVersion"]
        targetSdkVersion globalConfiguration["androidTargetSdkVersion"]

        versionCode globalConfiguration["androidVersionCode"]
        versionName globalConfiguration["androidVersionName"]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    lintOptions {
        checkAllWarnings true
    }

    flavorDimensions = ['default']

    productFlavors {
        exposed {
            proguardFile 'proguard-configurable-keep.pro'
        }

        production {
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFile getDefaultProguardFile('proguard-android.txt')
            proguardFile 'proguard-keep-as-api.pro'
        }
    }

    configurations {
        javadocDeps
    }

    sourceSets {
        androidTest {
            java.srcDirs = ['src/androidTest/java']
            res.srcDirs = ['src/androidTest/res']
        }
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {
    final def d = rootProject.ext.libraryDependencies
    final def td = rootProject.ext.libraryTestDependencies

    testImplementation td.androidxTestCore
    testImplementation td.junitVintage
    testImplementation td.kotlin
    testImplementation td.mockitoCore
    testImplementation td.mockitoKotlin
    testImplementation td.robolectric
    testImplementation 'org.khronos:opengl-api:gl1.1-android-2.1_r1'

    javadocDeps d.annotations

    implementation d.annotations
    implementation project(':library')
}

publishing {

    publications {
        release(MavenPublication) {
            groupId = GROUP
            artifactId = POM_ARTIFACT_ID
            version = rootProject.extensions.getByName("ext")["androidVersionName"]

            repositories {
                maven {
                    url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'

                    credentials {
                        final Properties properties = new Properties()
                        properties.load(project.rootProject.file('local.properties').newDataInputStream())

                        username properties.getProperty('releaseRepositoryUsername')
                        password properties.getProperty('releaseRepositoryPassword')
                    }
                }
            }

            pom {
                name = POM_NAME
                packaging = POM_PACKAGING
                description = POM_DESCRIPTION
                url = POM_URL

                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }

                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                        distribution = POM_LICENCE_DIST
                    }
                }

                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                    }
                }
            }

            artifacts {
                artifact "${project.getLayout().getBuildDirectory().asFile.get().canonicalPath}/outputs/aar/opengl-production-release.aar"
            }

            afterEvaluate {
                from components.find { it.name == 'release' }
            }
        }
    }
}

signing {
    useGpgCmd()
    publishing.publications.forEach {
        sign it
    }
}

publishReleasePublicationToMavenRepository.mustRunAfter "bundleProductionReleaseAar"